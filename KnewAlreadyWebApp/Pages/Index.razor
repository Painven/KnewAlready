@page "/"
@using KnewAlreadyWebApp.Data
@using System.Timers
@inject SuggetWebApiSwaggerClient apiClient
@implements IDisposable

<PageTitle>Index</PageTitle>

<div class="suggest-action-tool-panel my-2">
    <div class="btn-group" role="group">
        <button class="btn btn-secondary p-2" @onclick="(async e => await LoadData())">
            <span class="oi oi-cloud"></span>
            Загрузить данные
        </button>
        <button class="btn btn-warning p-2" 
            disabled=@(data.Count == 0)
            @onclick="(e => { data.Clear(); StateHasChanged(); } )">
            <span class="oi oi-trash"></span>
            Очистить
        </button>

    </div>
</div>

<h2>Все запросы</h2>
<div class="suggest-action-list">
    @if(data is not null)
    {
        @foreach(var item in data)
        {
            <div class="suggest-action-item@((newItems.Contains(item) ? " new-item" : ""))">
                <p>Создан: <span>@item.Created</span></p>
                <h3>@item.CategoryName</h3>
                <div class="suggest-action-item-inner">
                    <p>@item.InitiatorUsername</p>
                    <span class=@("fa " + (item.IsCompleted ? "fa-hands-helping completed" : "fa-question"))></span>
                    <p>@item.AcceptorUsername</p>
                </div>
            </div>
        }
    }
    else
    {
        <LoadingSpinner />
    }
</div>


@code {
    List<SuggestActionModel> data = new List<SuggestActionModel>();
    List<SuggestActionModel> newItems = new List<SuggestActionModel>();
    System.Timers.Timer timer;

    protected override async Task OnInitializedAsync()
    {
        timer = new System.Timers.Timer((int)TimeSpan.FromSeconds(3).TotalMilliseconds);
        timer.Elapsed += TimerTick;
        timer.Start();

        await LoadData();
    }

    private async void TimerTick(object sender, ElapsedEventArgs e)
    {      
        List<SuggestActionModel> tempItems = data;

        await LoadData();

        newItems.Clear();
        foreach(var item in data)
        {
            var alreadyAddedItem = tempItems.FirstOrDefault(i => i.Guid == item.Guid);
            if(alreadyAddedItem == null || alreadyAddedItem.IsCompleted != item.IsCompleted)
            {
                newItems.Add(item);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadData()
    {
        data = (await apiClient.SuggestActionsAllAsync())
            .Select(item => new SuggestActionModel()
            {
                AcceptorUsername = item.AcceptorUsername,
                InitiatorUsername = item.InitiatorUsername,
                CategoryName = item.CategoryName,
                Created = item.Created.Date,
                IsCompleted = item.IsConfirmed,
                Guid = item.Id
            })
            .ToList();
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Elapsed -= TimerTick;
            timer.Dispose();
        }
    }
}