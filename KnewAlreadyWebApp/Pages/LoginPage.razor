@page "/login"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
<PageTitle>Вход</PageTitle>


<div class="profile-box">
    <div>
        <img src="/assets/images/user.png" />
        <label for="username">Имя пользователя</label>
        <input type="text" class="form-control" id="username" @bind="username" />
    </div>
    <div>
        <img src="/assets/images/password.png" />
        <label for="password">Пароль</label>
        <input type="password" class="form-control" id="password" @bind="password" />
    </div>

    <div>
        <button class="btn btn-lg btn-success p-3 mt-3 w-100" type="submit" @onclick="LoginUser" disabled="@LoginButtonDisabled">
            <span class="oi oi-check"></span>
            @if (isLoginInProgress)
            {
                <span>Вход</span>
                <LoadingSpinner />
            }
            else
            {
                <span>Войти</span>
            }
        </button>
        @if (hasErrors)
        {
            <p><strong style="color: red;">Ошибка: не верный логин или пароль!</strong></p>
        }
    </div>
    <div>
        <p>Нет аккаунта ? <a href="/register">Зарегистрироваться</a></p>
    </div>
</div>

@code {
    bool hasErrors = false;

    [Inject] public AuthenticationStateProvider authStateProvider { get; set; }
    [Inject] public NavigationManager navManager { get; set; }

    string username = string.Empty;
    string password = string.Empty;
    bool isLoginInProgress = false;

    bool LoginButtonDisabled => isLoginInProgress || string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password) || (password?.Length ?? 0) < 8;

    private async Task LoginUser()
    {
        isLoginInProgress = true;
        hasErrors = false;

        try
        {
            var state = await ((CustomAuthProvider)authStateProvider).Login(username, password);

            hasErrors = state.User.Identity.Name == "anonymous";

        }
        finally
        {
            isLoginInProgress = false;
        }

        if (!hasErrors)
        {
            navManager.NavigateTo("/");
        }
    }
}