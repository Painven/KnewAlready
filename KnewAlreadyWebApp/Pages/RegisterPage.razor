@page "/register"
@using KnewAlreadyWebApp.Data
<PageTitle>Регистрация пользователя API</PageTitle>

<div class="container">
    <EditForm Model="newUser" OnValidSubmit="RegisterNewUser">
        <DataAnnotationsValidator />

        <div class="profile-box">


            <div>
                <img src="/assets/images/user.png" />
                <label for="username">Имя пользователя</label>
                <input type="text" class="form-control" id="username" @bind="newUser.Username" />
                <ValidationMessage For="@(() => newUser.Username)" />
            </div>
            <div>
                <img src="/assets/images/password.png" />
                <label for="password">Пароль</label>
                <input type="password" class="form-control" id="password" @bind="newUser.Password" />
                <ValidationMessage For="@(() => newUser.Password)" />
            </div>
            <div>
                @if (hasErrors)
                {
                    <h3>Ошибка создания пользователя</h3>
                }
                <button class="btn btn-lg btn-success p-3 mt-3 w-100" type="submit">
                    <span class="oi oi-check"></span>
                    Зарегистрироваться
                </button>
            </div>
        </div>
    </EditForm>
</div>


<style>
    .register-container {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        gap: 12px;
    }

        .register-container > div {
            flex: 1;
            width: 300px;
        }
</style>


@code {
    AppUser newUser = new AppUser();
    [Inject] SuggetWebApiSwaggerClient apiClient { get; set; }
    [Inject] NavigationManager navigationManager { get; set; }
    bool hasErrors = false;

    private async Task RegisterNewUser()
    {
        var result = await apiClient.CreateUserAsync(
            new CreateUserDto()
                {
                    Username = newUser.Username,
                    Password = newUser.Password
                });

        if (result)
        {
            navigationManager.NavigateTo("/");
            hasErrors = false;
        }
        else
        {
            hasErrors = true;
        }
    }
}
